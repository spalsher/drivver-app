# Drivrr Project Rules

## Tech Stack - DO NOT DEVIATE
- **Frontend**: Flutter (customer_app + driver_app)
- **Backend**: Node.js + Express + PostgreSQL
- **Maps**: MapLibre GL Native (3D maps) - NO subscription services
- **State Management**: Riverpod
- **Navigation**: GoRouter
- **Authentication**: JWT + Phone OTP
- **Real-time**: WebSockets (socket.io)
- **HTTP**: Dio package
- **Database**: PostgreSQL with proper migrations

## UI/UX Guidelines
- **Design**: Material 3 design system
- **Theme**: Consistent color scheme (purple/blue primary)
- **Layout**: Symmetrical, professional, clean
- **Typography**: Google Fonts (Inter)
- **Components**: Reusable widgets in shared/widgets
- **Animations**: Subtle, smooth transitions

## Architecture Rules
- **Folder Structure**: Feature-based (features/auth, features/home, etc.)
- **Services**: Core services in core/services
- **Models**: Proper data models with JSON serialization
- **Error Handling**: Consistent error handling with user-friendly messages
- **Validation**: Input validation on both frontend and backend

## Development Rules
1. **ALWAYS** test changes before marking as complete
2. **NEVER** create new features without user approval
3. **ALWAYS** fix compilation errors immediately
4. **NEVER** use subscription-based services (Firebase, Google Maps paid)
5. **ALWAYS** maintain consistent code style
6. **NEVER** break existing functionality when adding new features
7. **ALWAYS** use proper imports and avoid conflicts
8. **NEVER** leave TODO comments in production code

## Map Integration Rules
- Use MapLibre GL Native for 3D maps
- Handle location permissions properly
- Implement offline map caching
- Use OSRM for routing (free)
- Handle map errors gracefully

## API Integration Rules
- Use proper error handling
- Implement retry logic
- Use environment variables for API keys
- Validate all API responses
- Handle network connectivity issues

## Testing Rules
- Test on real devices
- Handle edge cases
- Test offline scenarios
- Validate user flows end-to-end

## Code Quality
- Follow Dart/Flutter best practices
- Use meaningful variable names
- Add proper documentation
- Remove unused imports
- Fix linter warnings
